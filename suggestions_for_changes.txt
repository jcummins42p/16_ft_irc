Hi! =)

I'm working on this list right now, I do everything in my fork:
https://github.com/makayun/16_ft_irc
so I wont mess things up (I hope).
It doesn't work right now, still need to implement and polish some stuff, but you can take a look =)
So, here we go:

Makefile:
+ Add an -fsanitize=address flag, so we're aware of leaks and other problems

IRCServer.hpp:
+ Change the filename to Server.hpp or change Server.cpp to IRC...
+ We don't have a server password, in the subject:
		"Your executable will be run as follows:
		./ircserv <port> <password>"


IRCServer.cpp:
+ Again, add the password
+ Also, shouldn't the password be hashed? So we don't have am actual password in memory, only an encripted version?
	And then hash what the user passes and compare these encrypted things, for safety, yo know.
+ In NICK, USER and other commands we don't check for an empty input, so the name could be changed for nothing, for example.
+ In processMessage method - shouldn't we print a message if it wasn't a command?
- All channel logic should be in the Channel class, including admin rights checks (you can't kick someone if you're not an operator)
- PRIVMSG sends a message to a channel for some reason, but it should send to an exact client
- User should be authenticated only after setting a nick and a name

Client.hpp:
+ Data should be private. And add getters/setters for what we need to read or change on the go
+ is_operator can't be here, there should be a list of admins in the Channel class
- Channels are still are still public, will get back to it later, after fixing channels themself

Client.cpp:
+ Again, add getters/setters for private data.
- Channels are still are still public, will get back to it later, after fixing channels themself


Channel.hpp:
+ Again, data can't be public. So, private section and getters/setters.

Channel.cpp:
+ How could be user_limit be -1? I'd set it to MAX_CLIENTS first and then an operator can change it.
+ Also, when user_limit is changed - we should check if it's <= MAX_CLIENTS.
+ Right now we have no checks for who is doing the action - again, only an admin (operator) can kick or change modes.
? Password should be hashed.
- Password is hashed now, but I have no idea how to ask users to enter it and how to check it, will work on it later
- Need to implement MODE command

Overall:
- We need to add somehow this ctrl+D thing (the subject, page 6), I have no idea how to do it
? When the server is closed - the user should be at least informed about it somehow, maybe?
	Right now closing the server just cleans itself and that's it, but maybe I'm wrong.
- I added closing of clients' fds when the programm closes (well, I believe I added, please check it in the IRCServer destructor)





Just a list of commands according to the RFC 1459 (an IRC standard):

KICK
Syntax:
KICK <channel> <client> :[<message>]
Forcibly removes <client> from <channel>.[12] This command may only be issued by channel operators.

INVITE
Syntax:
INVITE <nickname> <channel>
Invites <nickname> to the channel <channel>.[9] <channel> does not have to exist, but if it does, only members of the channel are allowed to invite other clients. If the channel mode i is set, only channel operators may invite other clients.

TOPIC
Syntax:
TOPIC <channel> [<topic>]
Allows the client to query or set the channel topic on <channel>.[43] If <topic> is given, it sets the channel topic to <topic>. If channel mode +t is set, only a channel operator may set the topic.

MODE
Syntax:
MODE <nickname> <flags> (user)
MODE <channel> <flags> [<args>]
The MODE command is dual-purpose. It can be used to set both user and channel modes.
........................................................

*when a channel is created, a password should be set and the client 
who created the channel should be set as the operator(admin), 
if the admin leaves the channel the privileges should move to 
the second client*

*PRIMSG does not send messages to the 
channel only to specific client*

Penny
PRIVMSG now works as it should
JOIN now needs a password which is set when the channel is created (JOIN <#channel> <password>)